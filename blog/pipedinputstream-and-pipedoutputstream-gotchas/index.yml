title: PipedInputStream and PipedOutputStream gotchas
description: A couple of gotchas I encountered while using Java's PipedInputStream and PipedOutputStream classes.
createdAt: 2020-07-18
lastModified: 2020-07-19
body: |
  <p>
    To do I/O in Java, you read from InputStreams and write to OutputStreams. Sometimes you want to connect the output of an OutputStream to the input of an InputStream. In my case, I wanted to upload a CSV (generated by writing to a given OutputStream) to Amazon S3 (using a class reading from an InputStream).
  </p>

  <p>
    I solved this problem using a <a href="https://docs.oracle.com/javase/7/docs/api/java/io/PipedInputStream.html">PipedInputStream</a> and <a href="https://docs.oracle.com/javase/7/docs/api/java/io/PipedOutputStream.html">PipedOutputStream</a>. Reading from a PipedInputStream returns bytes written to the connected PipedOutputStream. Here was the Kotlin code I ended up with:
  </p>

  <code><pre>// Create a PipedInputStream; automatically close it at the end of
  // the lambda
  PipedInputStream().use { inputStream ->

    // Run the given lambda in a new thread
    thread {

      // Create a PipedOutputStream and connect it to the
      // PipedInputStream; automatically close it at the end of the
      // lambda
      PipedOutputStream(inputStream).use { outputStream ->
        generateCsv(outputStream)
      }
    }

    uploadToS3(inputStream)
  }</pre></code>

  <p>
    These classes come with a couple of gotchas. First, you should write to the PipedOutputStream and read from the PipedInputStream on separate threads. (Each class’s documentation clearly states this, so this isn’t so much a gotcha as a case of me not reading the docs closely enough.) If you read and write on the same thread, you might encounter a deadlock.
  </p>

  <p>
    The deadlock’s symptoms depend on whether your single-threaded code reads before it writes or vice versa. If it reads from the PipedInputStream first, it’ll hang forever waiting for something to write to the PipedOutputStream. However, if it writes to the PipedOutputStream first, you might not see any symptoms initially. In my case, I wrote a passing test that generated a small CSV and uploaded it to an S3 mock. However, when the code ran in production, it generated part of the CSV, then looped forever.
  </p>

  <p>
    The problem is buffering. PipedInputStreams buffer 1,024 bytes by default. Like I did, you might also wrap the former in a BufferedReader or the latter in a BufferedWriter, which default to using 8,192-byte buffers. As long as the data you write fit into the largest buffer in the stream, you won’t notice any problems. Writing won’t block because the buffer can hold all the written bytes. Then the PipedInputStream can read all the data you wrote. But as soon as you write enough data to fill the buffer, your write will block and you’ll encounter a deadlock.
  </p>

  <p>
    As the code above demonstrates, the solution is to read on one thread and write on another. That way, reading and writing can block without preventing the other operation from making progress.
  </p>

  <p>
    After realizing this, I encountered the second gotcha. My code initially called <code>generateCsv</code> on the main thread and <code>uploadToS3</code> on the thread created by <code>thread</code>. The issue is that, when <code>generateCsv</code> finishes, the main thread returns from the <code>use</code> block associated with the PipedInputStream. This closes the PipedInputStream even if <code>uploadToS3</code> is in the middle of reading from it. In my case, I noticed that the CSV file written to the S3 mock was truncated.
  </p>

  <p>
    To solve this problem, read on the main thread and write on the newly-created thread. This way, the PipedInputStream doesn’t close until <code>uploadToS3</code> has read everything from it.
  </p>

  <p>
    It took me a few hours to figure out what are in retrospect a couple of simple mistakes. My main takeaway is that I need to read documentation more carefully. I should also spend more time getting to know Java’s I/O primitives better.
  </p>
