{"version":3,"sources":["Track.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StepWithNote","styled","div","Step","Track","name","steps","stepsWithNotes","range","map","index","includes","PATTERNS","bpmRange","tracks","SOUNDS","Howl","src","volume","Container","Tracks","CurrentStepIndicator","currentStep","Spacer","App","useState","setCurrentStep","bpm","setBpm","pattern","find","bpmLow","bpmHigh","useEffect","timer","setInterval","nextStep","track","play","clearInterval","type","min","it","max","value","onChange","event","Number","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f29252c.chunk.js","sourcesContent":["import range from 'lodash/range';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport './App.css';\n\ntype Props = {\n  name: string;\n  steps: number;\n  stepsWithNotes: number[];\n}\n\nconst StepWithNote = styled.div`\n  height: 40px;\n  width: 8px;\n  background-color: grey;\n`;\n\nconst Step = styled.div`\n  height: 40px;\n  width: 8px;\n  border: 1px solid grey;\n  box-sizing: border-box;\n`;\n\nexport function Track({ name, steps, stepsWithNotes }: Props) {\n  return (\n    <>\n      <div>{name}</div>\n      {range(0, steps).map(index => (\n        stepsWithNotes.includes(index) ? (\n          <StepWithNote />\n        ) : (\n          <Step />\n        )\n      ))}\n    </>\n  );\n}\n","import { Howl } from 'howler';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\nimport range from 'lodash/range';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { Track } from './Track';\n\nconst STEPS = 8;\nconst STEPS_PER_BEAT = 2;\n\nconst DEFAULT_BPM = 128;\n\nconst PATTERNS = [\n  {\n    name: \"House\",\n    bpmRange: [120, 140],\n    tracks: [\n      { name: \"Kick\", stepsWithNotes: [0, 2, 4, 6] },\n      { name: \"Snare\", stepsWithNotes: [2, 6] },\n      { name: \"Hi-hat\", stepsWithNotes: range(0, 8) }\n    ],\n  },\n  {\n    name: \"Dubstep\",\n    bpmRange: [140, 160],\n    tracks: [\n      { name: \"Kick\", stepsWithNotes: [0, 4] },\n      { name: \"Snare\", stepsWithNotes: [4] },\n      { name: \"Hi-hat\", stepsWithNotes: range(0, 8) }\n    ],\n  },\n  {\n    name: \"Drum and bass\",\n    bpmRange: [160, 180],\n    tracks: [\n      { name: \"Kick\", stepsWithNotes: [0, 5] },\n      { name: \"Snare\", stepsWithNotes: [2, 6] },\n      { name: \"Hi-hat\", stepsWithNotes: range(0, 8) }\n    ],\n  }\n];\n\nconst SOUNDS = {\n  \"Kick\": new Howl({ src: ['kick.wav'] }),\n  \"Snare\": new Howl({ src: ['snare.wav'] }),\n  \"Hi-hat\": new Howl({ src: ['hi-hat.mp3'], volume: 0.5 }),\n};\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Tracks = styled.div<{ steps: number }>`\n  display: grid;\n  grid-template-columns: auto repeat(${({ steps }) => steps}, 1fr);\n  grid-row-gap: 16px;\n  grid-column-gap: 80px;\n  align-items: center;\n`;\n\nconst CurrentStepIndicator = styled.div<{ steps: number, currentStep: number }>`\n  height: 40px;\n  width: 8px;\n  background-color: orange;\n\n  grid-column-start: ${({ currentStep }) => currentStep + 2};\n  grid-column-end: ${({ steps }) => steps + 2};\n`;\n\nconst Spacer = styled.div`\n  height: 32px;\n`;\n\nfunction App() {\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [bpm, setBpm] = useState<number>(DEFAULT_BPM);\n\n  const pattern = PATTERNS.find(({ bpmRange: [bpmLow, bpmHigh] }) => {\n    return bpm >= bpmLow && bpm <= bpmHigh;\n  })!!;\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const nextStep = (currentStep + 1) % STEPS;\n      setCurrentStep(nextStep);\n\n      for (let track of pattern.tracks) {\n        if (track.stepsWithNotes.includes(nextStep)) {\n          SOUNDS[track.name as 'Kick' | 'Snare' | 'Hi-hat'].play();\n        }\n      }\n    }, 60 * 1000 / bpm / STEPS_PER_BEAT);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <>\n      <Container>\n        <Tracks steps={STEPS}>\n          <CurrentStepIndicator steps={STEPS} currentStep={currentStep} />\n          {\n            pattern.tracks.map(({ name, stepsWithNotes }) => (\n              <Track name={name} steps={STEPS} stepsWithNotes={stepsWithNotes} />\n            ))\n          }\n        </Tracks>\n\n        <Spacer />\n\n        <div>\n          <p>\n            {pattern.name}\n          </p>\n          <p>\n            BPM: {bpm}\n          </p>\n          <input\n            type=\"range\"\n            min={min(PATTERNS.map(it => it.bpmRange[0]))}\n            max={max(PATTERNS.map(it => it.bpmRange[1]))}\n            value={bpm}\n            onChange={(event) => setBpm(Number.parseInt(event.target.value))}\n          />\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}